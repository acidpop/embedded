**************************** bluez 설치 ****************************
bluez라는 리눅스의 블루투스 통신을 담당하는 패키지를 설치하여야 함.
가장 먼저 update와 upgrade로 패키지들을 갱신하여야 함.
 $ sudo apt-get update
 $ sudo apt-get upgrade

라즈베리파이3는 블루투스 모듈이 내장되어 있는데, 동작을 위해 펌웨어를 갱신하고 pi-blutooth패키지를 설치하여야 함. 그 후 재부팅하여야 됨.

 $ sudo rpi-update
 $ sudo apt-get install pi-bluetooth

다음은 bluez 등을 포함한 패키지들을 설치하여야 함.
 $ sudo apt-get install bluetooth blueman bluez python-gobject python-gobject-2


먼저 bluetoothd 서비스 데몬은 systemd에 등록되어 부팅 시에 자동으로 실행하지만, 수동으로 정지하거나 실행하려면 다음과 같은 명령을 입력하면 된다.

 $ sudo systemctl stop bluetooth
 $ sudo systemctl start bluetooth

다음은 블루투스를 위한 도구들에 대해 알아보자. bluez 패키지에는 다양한 도구들이 있다. 그 중에서 물리적인 블루투스 HCI 장치를 위한 HCI 도구들과 bluetoothd 와 통신하며 블루투스 장치를 검색하고 연결하는 등의 기본적인 블루투스 동작을 실행하는 bluetoothctl 프로그램이 특히 유용하다.

먼저 블루투스 HCI 장치를 설정해 보자. 다음 명령을 입력하면 HCI 장치에 대한 정보를 보여준다.


 $ sudo hciconfig
 hci0:    Type: BR/EDR    Bus: UART
     BD Address: 11:22:33:44:55:66    ACL MTU: 1021:8  SCO MTU: 64:1
     UP RUNNING PSCAN
     RX bytes:14509 acl: 94 sco: 0 events:621 errors:0
     TX bytes:12772 acl:99 sco: commands:530 errors:0

장치가 검색가능하도록 하려면 다음과 같은 명령을 입력한다.
 $ sudo hciconfig -a hci0 piscan

이제 스마트 폰 등에서 블루투스 검색 기능을 활용하면 장치를 검색할 수 있다.

반대로 주변의 다른 블루투스 장치를 검색하려면 다음 명령을 입력한다.
반대로 주변의 다른 블루투스 장치를 검색하려면 다음 명령을 입력한다.

 $ hcitool scan
 Scanning …
     11:22:33:44:55:66    MyPhone

다음은 bluetoothctl 을 사용해 보자. 다음 명령을 입력하면 bluetooth 쉘에 진입할 것이다.

 $ sudo bluetoothctl
  [NEW] Controller 11:22:33:44:55:66 raspberrypi [default]
  [NEW] Device 11:22:33:44:55:77 MyPhone
  [bluetooth]# help

블루투스 제어 장치의 정보를 보려면 show 명령을 입력한다.

 [bluetooth]# show

다른 장치와 페어링 등을 하기 위해서는 기본 에이전트로 등록해야 한다.

 [bluetooth]# agent on
 Agent registered
 [bluetooth]# dfault-agent
 Default agent request successful

주변의 다른 장치를 검색하기 위해서 다음 명령을 입력한다.

 [bluetooth]# scan on
 Discovery started
 [CHG] Controller 11:22:33:44:55:66 Discovering: yes
 [NEW] Device 11:22:33:44:55:77 RSSI: -31

자신을 다른 장치에서 검색 가능하게 하려면 다음 명령을 입력한다.

 [bluetooth]# discoverable on
 Changing discoverable on succeeded

이제 다른 장치와 페어링해 보자. 스마트폰의 블루투스 MAC 주소를 인자로 하여 다음 명령을 입력한다. 스마트폰과 쉘에서 동시에 페어링을 위한 패스키를 묻는 메시지가 나오고, 둘 다 yes를 선택하거나 입력하면 곧 페어링이 완료된다.

 [bluetooth]# pair 11:22:33:44:55:77
 Attempting to pair with 11:22:33:44:55:77
 [CHG] Device 11:22:33:44:55:77 Connected: yes
 Request confirmation
 [agent] Confirm passkey 642808 (yes/no) : yes
 [CHG] Device 11:22:33:44:55:77 Modalias: bluetooth:v0011p0123:0345
 …
 [CHG] Device 11:22:33:44:55:77 ServiceResolved: yes
 [CHG] Device 11:22:33:44:55:77 Paired: yes
 Pairing successful

다음은 장치와 연결해 보자. 연결 기능은 해당하는 서비스/프로파일이 양쪽 기기에 설치되어 있어야 하므로, 앞으로 소개할 서비스가 구현되지 않아 연결되지 않더라도 당장은 고민하지 말자.

 [bluetooth]# connect 11:22:33:44:55;77
 Attempting to connect to 11:22:33:44:55:77
 [CHG] Device 11:22:33:44:55:77 Connected: yes
 Connection successful
 [CHG] Device 11:22:33:44:55:77 ServiceResolved: yes

상대 장치의 정보를 보려면 다음 명령을 입력한다.


 [bluetooth]# info 11:22:33:44:55:77
 Device 11:22:33:44:55:77
     Name: MyPhone
     Alias: MyPhone
     Class: 0x5a020c
     Icon: phone
     Paired: yes
     Trusted: no
     Blocked: no
     Connected: no
     LegacyPairing: no
     UUID: OBEX Object Push          (00001105-0000-1000-8000-00805f9b34fb)
     UUID: Audio Source              (0000110a-0000-1000-8000-00805f9b34fb)
     UUID: A/V Remote Control Target (0000110c-0000-1000-8000-00805f9b34fb)
     UUID: A/V Remote Control Cont.. (0000110f-0000-1000-8000-00805f9b34fb)
     UUID: Headset AG                (00001112-0000-1000-8000-00805f9b34fb)
     UUID: PANU                      (00001115-0000-1000-8000-00805f9b34fb)
     UUID: NAP                       (00001116-0000-1000-8000-00805f9b34fb)
     UUID: Handsfree Audio Gateway   (0000111f-0000-1000-8000-00805f9b34fb)
     UUID: Phonebook Access Server   (0000112f-0000-1000-8000-00805f9b34fb)
     UUID: Message Access Server     (00001132-0000-1000-8000-00805f9b34fb)
     UUID: PnP Information           (00001200-0000-1000-8000-00805f9b34fb)
     UUID: Generic Access Profile    (00001800-0000-1000-8000-00805f9b34fb)
     Modalias: bluetooth:v0046p0802d0903
     RSSI: -29

여기서, 프로파일/서비스는 각자 고유한 UUID를 가지고 있음을 알 수 있다. 이 UUID 정보를 통해 서로 연결하고 통신할 수 있다.

연결을 해제하려면 다음 명령을 입력한다.

 [bluetooth]# disconnect 11:22:33:44:55;77
 Attempting to disconnect from 11:22:33:44:55:77
 [CHG] Device 11:22:33:44:55:77 ServiceResolved: no
 Successful disconnected
 [CHG] Device 11:22:33:44:55:77 Connected: no

장치의 프로파일/서비스를 확인하기 위해 sdltool(Service Discovery Protocol tool)을 사용해도 된다.

 $ sudo sdptool browse [MAC주소]

그런데, 자신의 로컬 서비스를 보려면 bluetoothd 실행 시에 -C (compat) 옵션을 추가해야 한다. bluetoothd 서비스 설정 파일인 /lib/systemd/system/bluetooth.service 파일을 수정하여 다음과 같이 수정한다.


 $ sudo vi /lib/systemd/system/bluetooth.service
 …
 ExecStart: /usr/lib/bluetooth/bluetoothd -C 
 …

이제 bluetoothd를 재실행한다.


 $ sudo systemctl restart bluetooth.service

이제 다음 명령을 실행한다.


 $ sudo sdptool browse local

앞서 설치한 블루투스 관련 패키지 중 blueman을 통해 블루투스 장치를 GUI 화면에서도 제어할 수 있다. X 윈도우 GUI 화면 상단의 메뉴에서 기본 설정(Preferences) 서브메뉴에  블루투스 관리자(Bluetooth Devices)가 추가된 것을 확인하고 선택하여 블루투스 관리자 프로그램(blueman-manager)을 실행시켜 보자.


검색(Search) 버튼을 클릭하거나 기다리면 주위의 블루투스 장치들을 검색할 것이다. 상단 메뉴바에서 어댑터(Adaptor) 메뉴를 선택하고 기본 설정(Preferences)  서브메뉴를 선택한다. 어댑터 설정 창에서 장치의 이름과 다른 장치에게 보여줄지를 선택할 수 있는데, “항상 보임(Always Visible)” 을 선택하자.
이제 다른 장치와 페어링(pairing)을 하면 통신할 수 있다. 예를 들면, WiFi 동글 등의 인터넷 연결 장치가 없을 때 스마트폰과 블루투스 테더링하여 인터넷을 사용할 수 있다. 블루투스 관리자 창에서 스마트폰 장치를 마우스 오른쪽 버튼으로 클릭하면 팝업메뉴가 나타는데 여기서 페어링을 선택한다. 그러면 스마트폰과 라즈베리파이에서 각각 페어링 요청 메시지가 나타나는데 모두 확인버튼을 클릭하여 페어링하면 된다.
  

